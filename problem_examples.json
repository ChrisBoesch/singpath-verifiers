{
  "python": {
    "pass_example": {
      "tests": ">>> x\n 2\n>>> y\n 3",
      "solution": "x=2\ny=3",
      "is_solved": true
    },
    "fail_example": {
      "tests": ">>> x\n 2\n>>> y\n 3",
      "solution": "x=2\ny=2",
      "is_solved": false
    },
    "error_example": {
      "tests": ">>> x\n 2",
      "solution": "y=2",
      "is_solved": false,
      "returns_error": true
    },    
    "print_example": {
      "tests": ">>> x\n 2",
      "solution": "print(99)\nx=2",
      "is_solved": true
    }

  },
  "example": {
    "pass_example": {
      "tests": "",
      "solution": "pass",
      "is_solved": true
    },
    "fail_example": {
      "tests": "",
      "solution": "fail",
      "is_solved": false
    },
    "error_example": {
      "tests": "",
      "solution": "error",
      "is_solved": false,
      "returns_error": true
    }
  },
  "java": {
    "3": {
      "tests": "\n   public void testExample(){\n      assertEquals(2 , 2);\n   }\n",
      "solution": "\npublic class SingPath {\n   public Double add() {\n      return 2.0;\n   }\n} \n",
      "is_solved": true
    },
    "4": {
      "tests": "\n   public void testExample(){\n      assertEquals(2 , 2);\n   }\n",
      "solution": "\npublic class SingPath {\n   public Double add() {\n      return 2.0;\n   }\n} \n",
      "is_solved": true
    },
    "5": {
      "tests": "\n   public void testExample(){\n      assertEquals(2 , 2);\n   }\n",
      "solution": "\npublic class SingPath {\n   public Double add() {\n      return 2.0;\n   }\n} \n",
      "is_solved": true
    },
    "6": {
      "tests": "\n   public void testExample(){\n      assertEquals(2 , 2);\n   }\n",
      "solution": "\npublic class SingPath {\n   public Double add() {\n      return 2.0;\n   }\n} \n",
      "is_solved": true
    },
    "7": {
      "tests": "\n   public void testExample(){\n      assertEquals(2 , 2);\n   }\n",
      "solution": "\npublic class SingPath {\n   public Double add() {\n      return 2.0;\n   }\n} \n",
      "is_solved": true
    },
    "8": {
      "tests": "\n   public void testExample(){\n      assertEquals(2 , 2);\n   }\n",
      "solution": "\npublic class SingPath {\n   public Double add() {\n      return 2.0;\n   }\n} \n",
      "is_solved": true
    },
    "9": {
      "tests": "\n   public void testExample(){\n      assertEquals(2 , 2);\n   }\n",
      "solution": "\npublic class SingPath {\n   public Double add() {\n      return 2.0;\n   }\n} \n",
      "is_solved": true
    },
    "pass_example": {
      "tests": "\n   public void testExample(){\n      assertEquals(2 , 2);\n   }\n",
      "solution": "\npublic class SingPath {\n   public Double add() {\n      return 2.0;\n   }\n} \n",
      "is_solved": true
    },
    "fail_example": {
      "tests": "\n   public void testExample(){\n      assertEquals(2 , 3);\n   }\n",
      "solution": "\npublic class SingPath {\n   public Double add() {\n      return 2.0;\n   }\n} \n",
      "is_solved": false
    },
    "compile_error": {
      "tests": "\n   public void testExample(){\n      assertEquals(2 , 2);\n   }\n",
      "solution": "\npublic class SingPath {\n   public Double add() {\n      return 2.0\n   }\n} \n",
      "is_solved": false
    }
  }
}